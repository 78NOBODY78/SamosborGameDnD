#include "successcalculator.h"
#include "terminalprinter.h"

#include <QComboBox>
#include <QSpinBox>
#include <QLabel>
#include <QPushButton>
#include <QFile>
#include <QDir>
#include <QJsonDocument>
#include <QJsonObject>
#include <QtMath>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
SuccessCalculator::SuccessCalculator(TerminalPrinter* printer, QObject* parent)
    : QObject(parent), terminal(printer) {}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
void SuccessCalculator::setupUI(QComboBox* characterSelect,
                                QLabel* classLabel,
                                QSpinBox* str, QSpinBox* agi, QSpinBox* intl,
                                QSpinBox* wpn, QSpinBox* med, QSpinBox* mech, QSpinBox* elec,
                                QComboBox* difficulty,
                                QComboBox* crit1, QComboBox* crit2, QComboBox* crit3, QComboBox* crit4,
                                QComboBox* skill1, QComboBox* skill2,
                                QSpinBox* masterMod,
                                QPushButton* calcButton)
{
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã
    this->characterSelect = characterSelect;
    this->classLabel = classLabel;
    this->str = str;
    this->agi = agi;
    this->intl = intl;
    this->wpn = wpn;
    this->med = med;
    this->mech = mech;
    this->elec = elec;
    this->difficulty = difficulty;
    this->crit1 = crit1;
    this->crit2 = crit2;
    this->crit3 = crit3;
    this->crit4 = crit4;
    this->skill1 = skill1;
    this->skill2 = skill2;
    this->masterMod = masterMod;
    this->calcButton = calcButton;

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—á—ë—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    connect(calcButton, &QPushButton::clicked, this, &SuccessCalculator::calculateSuccess);
    connect(characterSelect, &QComboBox::currentTextChanged, this, &SuccessCalculator::onCharacterChanged);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ø–∞–ø–∫–∏
    QDir charDir("data/characters/");
    if (charDir.exists()) {
        QStringList files = charDir.entryList(QStringList() << "*.json", QDir::Files);
        for (const QString& file : files) {
            QString charName = file;
            charName.chop(5); // —É–±–∏—Ä–∞–µ–º ".json"
            characterSelect->addItem(charName);
        }
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
void SuccessCalculator::onCharacterChanged(const QString& name)
{
    if (name.trimmed().isEmpty())
        return;

    QString path = "data/characters/" + name + ".json";
    QFile file(path);
    if (!file.exists()) {
        terminal->print("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ \"" + name + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        return;
    }

    if (!file.open(QIODevice::ReadOnly)) {
        terminal->print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + file.errorString());
        return;
    }

    QByteArray data = file.readAll();
    file.close();

    QJsonDocument doc = QJsonDocument::fromJson(data);
    if (!doc.isObject()) {
        terminal->print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ " + name);
        return;
    }

    QJsonObject obj = doc.object();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    str->setValue(obj["strength"].toInt());
    agi->setValue(obj["agility"].toInt());
    intl->setValue(obj["intellect"].toInt());
    wpn->setValue(obj["weapon"].toInt());
    med->setValue(obj["medicine"].toInt());
    mech->setValue(obj["mechanic"].toInt());
    elec->setValue(obj["electronics"].toInt());

    classLabel->setText(obj["class"].toString());
    terminal->print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: " + name);
}

// –†–∞—Å—á—ë—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞ –¥–ª—è —É—Å–ø–µ—Ö–∞ –∏ –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
void SuccessCalculator::calculateSuccess()
{
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    QString critType = crit1->currentText();   // —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    QString statSource = crit2->currentText(); // —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
    QString skillA = skill1->currentText();    // –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤—ã–∫
    QString skillB = skill2->currentText();    // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∞–≤—ã–∫
    QString diff = difficulty->currentText();  // —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    int mod = masterMod->value();              // –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    int B = getBaseDifficulty(diff);
    int H = getStatByName(statSource);
    int No = getSkillByName(skillA);
    int Nd = getSkillByName(skillB);
    int C = getCriteriaModifier(critType);

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    double KH = 2.0;
    double KNo = 1.0;
    double KNd = 0.5;
    double KC = 1.0;

    // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    double NoNorm = No / 10.0;
    double NdNorm = Nd / 10.0;

    // –†–∞—Å—á—ë—Ç –ø–æ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—É–ª–µ
    double bonus = H * KH + NoNorm * KNo + NdNorm * KNd + C * KC;
    double raw = B - bonus + mod;
    int T = qBound(1, static_cast<int>(qRound(raw)), 20); // –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1‚Äì20

    // –í—ã–≤–æ–¥
    QString log = formatBreakdown(B, H, No, Nd, C, mod, T);
    terminal->print(log);
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é
int SuccessCalculator::getBaseDifficulty(const QString& level)
{
    if (level == "–û—á–µ–Ω—å –ª—ë–≥–∫–æ–µ") return 5;
    if (level == "–õ—ë–≥–∫–æ–µ") return 10;
    if (level == "–°—Ä–µ–¥–Ω–µ–µ") return 15;
    if (level == "–°–ª–æ–∂–Ω–æ–µ") return 20;
    if (level == "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ") return 25;
    if (level == "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ") return 30;
    return 15;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –µ—ë —Ç–∏–ø—É
int SuccessCalculator::getStatByName(const QString& name)
{
    if (name == "–§–∏–∑–∏—á–µ—Å–∫–æ–µ") return str->value();
    if (name == "–£–º—Å—Ç–≤–µ–Ω–Ω–æ–µ") return intl->value();
    if (name == "–ì–∏–±—Ä–∏–¥–Ω–æ–µ") return agi->value();
    return 0;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
int SuccessCalculator::getSkillByName(const QString& name)
{
    if (name == "–û—Ä—É–∂–∏–µ") return wpn->value();
    if (name == "–ú–µ–¥–∏—Ü–∏–Ω–∞") return med->value();
    if (name == "–ú–µ—Ö–∞–Ω–∏–∫–∞") return mech->value();
    if (name == "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞") return elec->value();
    return 0;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏—è
int SuccessCalculator::getCriteriaModifier(const QString& crit)
{
    if (crit == "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ") return 2;
    if (crit == "–î–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–µ ") return 3;
    if (crit == "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ ") return 2;
    return 0;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Ä–∞—Å—á—ë—Ç–∞
QString SuccessCalculator::formatBreakdown(int B, int Hval, int No, int Nd, int Cmod, int M, int T)
{
    double res = B - (Hval*2 + No*1.5 + Nd*1.5 + Cmod*2) + M;
    return QString(
               "üßÆ –†–∞—Å—á—ë—Ç —É—Å–ø–µ—Ö–∞:\n"
               "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (B): %1\n"
               "‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (H=%2) √ó 2 = %3\n"
               "‚Ä¢ –ù–∞–≤—ã–∫ 1 (No=%4) √ó 1.5 = %5\n"
               "‚Ä¢ –ù–∞–≤—ã–∫ 2 (Nd=%6) √ó 1.5 = %7\n"
               "‚Ä¢ –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (C=%8) √ó 2 = %9\n"
               "‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ (M): %10\n"
               "‚Üí –ò—Ç–æ–≥–æ: %11 ‚Üí –¢—Ä–µ–±—É–µ–º—ã–π –±—Ä–æ—Å–æ–∫: üéØ %12")
        .arg(B)
        .arg(Hval).arg(Hval*2)
        .arg(No).arg(No*1.5)
        .arg(Nd).arg(Nd*1.5)
        .arg(Cmod).arg(Cmod*2)
        .arg(M)
        .arg(QString::number(res, 'f', 2))
        .arg(T);
}
