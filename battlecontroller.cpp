#include "battlecontroller.h"
#include "terminalprinter.h"

#include <QLineEdit>
#include <QComboBox>
#include <QSpinBox>
#include <QRadioButton>
#include <QPushButton>
#include <QGroupBox>
#include <QTextEdit>
#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <QRandomGenerator>
#include <QLabel>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –±–æ—è. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
BattleController::BattleController(TerminalPrinter* printer, QObject* parent)
    : QObject(parent), terminal(printer)
{}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –≥—Ä—É–ø–ø–±–æ–∫—Å—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞, NPC –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã, –æ—Ç–∫–ª—é—á–∞–µ—Ç –∏—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
void BattleController::setGroupBoxes(QGroupBox* playerBox, QGroupBox* npcBox, QGroupBox* initiativeBox)
{
    groupBoxPlayer = playerBox;
    groupBoxNPC = npcBox;
    groupBoxInitiative = initiativeBox;

    if (groupBoxPlayer) groupBoxPlayer->setEnabled(false);
    if (groupBoxNPC) groupBoxNPC->setEnabled(false);
    if (groupBoxInitiative) groupBoxInitiative->setEnabled(false);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
void BattleController::setupPlayerControls(QComboBox* characterSelect,
                                           QLineEdit* hitInput,
                                           QComboBox* weaponType,
                                           QRadioButton* standard, QRadioButton* advantage, QRadioButton* disadvantage,
                                           QSpinBox* str, QSpinBox* agi, QSpinBox* intl,
                                           QSpinBox* weapon, QSpinBox* medicine,
                                           QSpinBox* mechanic, QSpinBox* electronics,
                                           QPushButton* calcButton,
                                           QLabel* classLabel)
{
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
    characterSelectPlayer = characterSelect;
    inputPlayer = hitInput;
    weaponTypePlayer = weaponType;
    rbStandardPlayer = standard;
    rbAdvantagePlayer = advantage;
    rbDisadvantagePlayer = disadvantage;
    strP = str;
    agiP = agi;
    intP = intl;
    wpnP = weapon;
    medP = medicine;
    mechP = mechanic;
    elecP = electronics;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º label –∫–ª–∞—Å—Å–∞
    labelClassPlayer = classLabel;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
    connect(calcButton, &QPushButton::clicked, this, &BattleController::handlePlayerCalculate);
    connect(characterSelectPlayer, &QComboBox::currentTextChanged,
            this, &BattleController::onPlayerCharacterChanged);
}


// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è NPC –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
void BattleController::setupNPCControls(QComboBox* weaponType,
                                        QRadioButton* standard, QRadioButton* advantage, QRadioButton* disadvantage,
                                        QSpinBox* str, QSpinBox* agi, QSpinBox* intl,
                                        QSpinBox* weapon, QSpinBox* medicine,
                                        QSpinBox* mechanic, QSpinBox* electronics,
                                        QPushButton* rollButton, QPushButton* calcButton)
{
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã
    weaponTypeNPC = weaponType;
    rbStandardNPC = standard;
    rbAdvantageNPC = advantage;
    rbDisadvantageNPC = disadvantage;
    strN = str;
    agiN = agi;
    intN = intl;
    wpnN = weapon;
    medN = medicine;
    mechN = mechanic;
    elecN = electronics;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ NPC
    connect(rollButton, &QPushButton::clicked, this, &BattleController::handleNPCRoll);
    connect(calcButton, &QPushButton::clicked, this, &BattleController::handleNPCCalculate);
}

void BattleController::onPlayerCharacterChanged(const QString& characterName)
{
    QString path = "data/characters/" + characterName + ".json";
    QFile file(path);

    if (!file.open(QIODevice::ReadOnly)) {
        terminal->print("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + path);
        return;
    }

    QJsonParseError parseError;
    QJsonDocument doc = QJsonDocument::fromJson(file.readAll(), &parseError);
    file.close();

    if (parseError.error != QJsonParseError::NoError || !doc.isObject()) {
        terminal->print("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: " + parseError.errorString());
        return;
    }

    QJsonObject obj = doc.object();

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞ –∏–∑ JSON
    if (strP) strP->setValue(obj["strength"].toInt());
    if (agiP) agiP->setValue(obj["agility"].toInt());
    if (intP) intP->setValue(obj["intelligence"].toInt());
    if (wpnP) wpnP->setValue(obj["weapon"].toInt());
    if (medP) medP->setValue(obj["medicine"].toInt());
    if (mechP) mechP->setValue(obj["mechanic"].toInt());
    if (elecP) elecP->setValue(obj["electronics"].toInt());

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ label
    QString charClass = obj["class"].toString();  // —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–ª—é—á ‚Äî "class", –Ω–µ "–∫–ª–∞—Å—Å"
    if (labelClassPlayer) {
        labelClassPlayer->setText(charClass);
    }

    terminal->print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ " + characterName + " –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–æ–µ–≤–æ–π –º–æ–¥—É–ª—å.");
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±—Ä–æ—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ –∏ —Ä–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
void BattleController::handlePlayerCalculate()
{
    if (!inputPlayer) return;

    QStringList values = inputPlayer->text().trimmed().split(",");
    int roll = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–æ–±—ã—á–Ω—ã–π, —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º, —Å –ø–æ–º–µ—Ö–æ–π)
    if (rbStandardPlayer->isChecked() && values.size() == 1)
        roll = values[0].toInt();
    else if (rbAdvantagePlayer->isChecked() && values.size() == 2)
        roll = std::max(values[0].toInt(), values[1].toInt());
    else if (rbDisadvantagePlayer->isChecked() && values.size() == 2)
        roll = std::min(values[0].toInt(), values[1].toInt());
    else {
        terminal->print("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –±—Ä–æ—Å–∫–∞ –∏–≥—Ä–æ–∫–∞.");
        return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞—Ç–∞–∫–∏ (–¥–∞–ª—å–Ω–∏–π/–±–ª–∏–∂–Ω–∏–π)
    bool ranged = weaponTypePlayer->currentText().contains("–¥–∞–ª—å–Ω", Qt::CaseInsensitive);

    // –°—á–∏—Ç–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    int mod = calculateModifiers(ranged,
                                 strP->value(), agiP->value(), intP->value(),
                                 wpnP->value(), medP->value());

    int total = roll + mod;
    terminal->print(QString("üéØ –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç d20 (%1) + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (%2) = %3").arg(roll).arg(mod).arg(total));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞ d20 –¥–ª—è NPC
void BattleController::handleNPCRoll()
{
    npcRoll = QRandomGenerator::global()->bounded(1, 21);  // d20: –æ—Ç 1 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    terminal->print(QString("üé≤ NPC –±—Ä–æ—Å–∞–µ—Ç: %1").arg(npcRoll));
}

// –†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ NPC —Å —É—á—ë—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
void BattleController::handleNPCCalculate()
{
    bool ranged = weaponTypeNPC->currentText().contains("–¥–∞–ª—å–Ω", Qt::CaseInsensitive);

    int mod = calculateModifiers(ranged,
                                 strN->value(), agiN->value(), intN->value(),
                                 wpnN->value(), medN->value());

    int total = npcRoll + mod;
    terminal->print(QString("üéØ NPC: %1 + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (%2) = %3").arg(npcRoll).arg(mod).arg(total));
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á—ë—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
int BattleController::calculateModifiers(bool isRanged,
                                         int str, int agi, int intl,
                                         int wpn, int med)
{
    // –í—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏
    double h1 = isRanged ? static_cast<double>(intl) : static_cast<double>(str);
    double h2 = static_cast<double>(agi);

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0‚Äì10)
    double wpnNorm = static_cast<double>(wpn) / 10.0;
    double medNorm = static_cast<double>(med) / 10.0;

    // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    const double kH1 = 0.5;   // –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–ª–∏ —Å–∏–ª–∞
    const double kH2 = 1.0;   // –ª–æ–≤–∫–æ—Å—Ç—å
    const double kW  = 1.5;   // –æ—Ä—É–∂–∏–µ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
    const double kM  = 0.2;   // –º–µ–¥–∏—Ü–∏–Ω–∞ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)

    // –ü–æ–¥—Å—á—ë—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    double mod = h1 * kH1 + h2 * kH2 + wpnNorm * kW + medNorm * kM;

    // –í–æ–∑–≤—Ä–∞—Ç –æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    return static_cast<int>(qRound(mod));
}


// –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –±–æ—è: –≤–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
void BattleController::startBattle()
{
    terminal->print("‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞–ª—Å—è!");

    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–æ–µ–≤—ã–µ –ø–æ–ª—è
    if (characterSelectPlayer && !characterSelectPlayer->currentText().isEmpty()) {
        onPlayerCharacterChanged(characterSelectPlayer->currentText());
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
    if (groupBoxPlayer) groupBoxPlayer->setEnabled(true);
    if (groupBoxNPC) groupBoxNPC->setEnabled(true);
    if (groupBoxInitiative) groupBoxInitiative->setEnabled(true);

    if (characterSelectPlayer) characterSelectPlayer->setEnabled(true);
    if (inputPlayer) inputPlayer->setEnabled(true);
    if (weaponTypePlayer) weaponTypePlayer->setEnabled(true);
    if (rbStandardPlayer) rbStandardPlayer->setEnabled(true);
    if (rbAdvantagePlayer) rbAdvantagePlayer->setEnabled(true);
    if (rbDisadvantagePlayer) rbDisadvantagePlayer->setEnabled(true);
    if (strP) strP->setEnabled(true);
    if (agiP) agiP->setEnabled(true);
    if (intP) intP->setEnabled(true);
    if (wpnP) wpnP->setEnabled(true);
    if (medP) medP->setEnabled(true);
    if (mechP) mechP->setEnabled(true);
    if (elecP) elecP->setEnabled(true);

    if (weaponTypeNPC) weaponTypeNPC->setEnabled(true);
    if (rbStandardNPC) rbStandardNPC->setEnabled(true);
    if (rbAdvantageNPC) rbAdvantageNPC->setEnabled(true);
    if (rbDisadvantageNPC) rbDisadvantageNPC->setEnabled(true);
    if (strN) strN->setEnabled(true);
    if (agiN) agiN->setEnabled(true);
    if (intN) intN->setEnabled(true);
    if (wpnN) wpnN->setEnabled(true);
    if (medN) medN->setEnabled(true);
    if (mechN) mechN->setEnabled(true);
    if (elecN) elecN->setEnabled(true);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—è: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π
void BattleController::endBattle()
{
    terminal->print("üèÅ –ë–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω.");

    // –õ—è–º–±–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª–µ–π –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    auto clearWidgets = [](QGroupBox* box) {
        if (!box) return;
        box->setEnabled(false);

        // –°–±—Ä–æ—Å –≤—Å–µ—Ö SpinBox
        QList<QSpinBox*> spins = box->findChildren<QSpinBox*>(QString(), Qt::FindChildrenRecursively);
        for (QSpinBox* s : spins) s->setValue(0);

        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö LineEdit
        QList<QLineEdit*> lines = box->findChildren<QLineEdit*>(QString(), Qt::FindChildrenRecursively);
        for (QLineEdit* l : lines) l->clear();

        // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö TextEdit
        QList<QTextEdit*> texts = box->findChildren<QTextEdit*>(QString(), Qt::FindChildrenRecursively);
        for (QTextEdit* t : texts) t->clear();

        // –°–±—Ä–æ—Å ComboBox
        QList<QComboBox*> combos = box->findChildren<QComboBox*>(QString(), Qt::FindChildrenRecursively);
        for (QComboBox* c : combos) c->setCurrentIndex(0);

        // –°–±—Ä–æ—Å RadioButton
        QList<QRadioButton*> radios = box->findChildren<QRadioButton*>(QString(), Qt::FindChildrenRecursively);
        for (QRadioButton* r : radios) r->setChecked(false);
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º
    clearWidgets(groupBoxPlayer);
    clearWidgets(groupBoxNPC);
    clearWidgets(groupBoxInitiative);
}
