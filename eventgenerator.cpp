#include "eventgenerator.h"
#include "terminalprinter.h"

#include <QRandomGenerator>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
EventGenerator::EventGenerator(TerminalPrinter* terminal, QObject* parent)
    : QObject(parent), terminal(terminal)
{
    loadEventTemplates();
    loadAnomalyGrades();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
void EventGenerator::generate()
{
    const int roll = QRandomGenerator::global()->bounded(1, 101); // d100

    // –ê–Ω–æ–º–∞–ª–∏—è?
    if (isAnomaly(roll)) {
        const QString effect = describeAnomaly(roll); // HTML: <span style=...><b>...</b></span>
        terminal->printHtml(QString("üß® –ê–ù–û–ú–ê–õ–ò–Ø [%1]: %2").arg(roll).arg(effect));
        return;
    }

    // –û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const EventType type = categorize(roll);
    const auto texts = eventTexts.value(type);

    const QString eventText = texts.isEmpty()
                                  ? QStringLiteral("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ...")
                                  : texts.at(QRandomGenerator::global()->bounded(texts.size()));

    QString typeLabel;
    switch (type) {
    case EventType::Negative: typeLabel = QStringLiteral("–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"); break;
    case EventType::Neutral:  typeLabel = QStringLiteral("–§–æ–Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ");    break;
    case EventType::Positive: typeLabel = QStringLiteral("–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"); break;
    }

    terminal->print(QString("üé≤ [%1] %2").arg(roll).arg(typeLabel));
    terminal->print(QStringLiteral("üìç ") + eventText);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–µ–π
bool EventGenerator::isAnomaly(int roll) const
{
    // –Ø–≤–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –∞–Ω–æ–º–∞–ª–∏—é)
    static const QVector<int> excluded = {2, 3, 5, 23, 31, 41, 61, 71, 99, 100};
    if (excluded.contains(roll)) return false;

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    if (roll == 13 || roll == 66) return true;

    // –ü—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ -> –∞–Ω–æ–º–∞–ª–∏—è
    if (roll < 2) return false;
    for (int i = 2; i * i <= roll; ++i)
        if (roll % i == 0) return false;
    return true;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—Ä–æ—Å–∫–∞
EventGenerator::EventType EventGenerator::categorize(int roll) const
{
    if (roll <= 20) return EventType::Negative;
    if (roll <= 80) return EventType::Neutral;
    return EventType::Positive;
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-–æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –±—Ä–æ—Å–∫–∞
QString EventGenerator::describeAnomaly(int roll) const
{
    if (anomalyGrades.contains(roll)) {
        const auto g = anomalyGrades.value(roll);
        return QString("<span style='color:%1;'><b>%2</b></span>").arg(g.color, g.name);
    }

    // Fallback
    return QStringLiteral("<span style='color:#ff0000;'><b>–ù–ï–û–ü–û–ó–ù–ê–ù–ù–û–ï –ê–ù–û–ú–ê–õ–¨–ù–û–ï –Ø–í–õ–ï–ù–ò–ï</b></span>");
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
void EventGenerator::loadEventTemplates()
{
    eventTexts[EventType::Negative] = {
        QStringLiteral("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑–¥–∞—ë—Ç —Ç—Ä–µ–≤–æ–∂–Ω—ã–π –ø–∏—Å–∫ –∏ –∑–∞–º–æ–ª–∫–∞–µ—Ç."),
        QStringLiteral("–°–≤—è–∑—å —Å –≤–Ω–µ—à–Ω–∏–º –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–∞."),
        QStringLiteral("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ä–µ–∑–∫–æ –ø–∞–¥–∞–µ—Ç ‚Äî —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å –∫–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª–µ–º.")
    };

    eventTexts[EventType::Neutral] = {
        QStringLiteral("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ–ª–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –í—Å—ë –≤ –Ω–æ—Ä–º–µ."),
        QStringLiteral("–ü—ã–ª—å –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å–µ–¥–∞–µ—Ç –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ."),
        QStringLiteral("–ü—Ä–æ—Ö–æ–¥–∏—Ç –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –æ—Å–≤–µ—â–µ–Ω–∏—è.")
    };

    eventTexts[EventType::Positive] = {
        QStringLiteral("–ù–∞–π–¥–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫."),
        QStringLiteral("–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—è–≤–∏–ª–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."),
        QStringLiteral("–ó–∞–ø–∞—Å –ø—Ä–æ–≤–∏–∑–∏–∏ –ø—Ä–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–ø–ø—É –µ—â—ë –Ω–∞ —Å—É—Ç–∫–∏.")
    };
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
void EventGenerator::loadAnomalyGrades()
{
    anomalyGrades = {
        {7,  {QStringLiteral("–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–∑–∞—Ä–µ–Ω–∏–µ"),                      QStringLiteral("#00ff00")}},
        {11, {QStringLiteral("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É"),          QStringLiteral("#00aa00")}},
        {17, {QStringLiteral("–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ø–æ–ª—è"),                          QStringLiteral("#33cc66")}},
        {19, {QStringLiteral("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"),                       QStringLiteral("#cccc00")}},
        {29, {QStringLiteral("–≠—Ö–æ —á—É–∂–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"),                          QStringLiteral("#999933")}},
        {37, {QStringLiteral("–ü–∞–º—è—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"),                   QStringLiteral("#ff9900")}},
        {47, {QStringLiteral("–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π"),                         QStringLiteral("#cc6600")}},
        {53, {QStringLiteral("–†–∞–∑–ª–æ–º –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ"),                       QStringLiteral("#cc3300")}},
        {66, {QStringLiteral("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ò–ó–û–õ–Ø–¶–ò–Ø"),                QStringLiteral("#ff0000")}},
        {79, {QStringLiteral("–ü–æ–ª–µ –•–∞–æ—Å–∞: –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"),       QStringLiteral("#990000")}},
        {83, {QStringLiteral("–ü—Å–∏-–∫–æ–Ω—Ç–∞–∫—Ç. –ì—Ä—É–ø–ø–∞ –Ω–µ –æ—Å–æ–∑–Ω–∞—ë—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ."), QStringLiteral("#990033")}},
        {97, {QStringLiteral("–ü–û–õ–ù–ê–Ø –î–ï–ì–†–ê–î–ê–¶–ò–Ø –ö–û–ù–¢–£–†–ê"),                   QStringLiteral("#660000")}},
        {13, {QStringLiteral("–ê–Ω–æ–º–∞–ª–∏—è 13. –ù–µ —Ç—Ä–æ–≥–∞—Ç—å. –ù–∏–∫–æ–≥–¥–∞."),           QStringLiteral("#8b0000")}}
    };
}
