#include "samosborcontroller.h"
#include <QRandomGenerator>
#include <QTimer>
#include <QDebug>

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–π–º–µ—Ä—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
SamosborController::SamosborController(QObject *parent)
    : QObject(parent),
    mainTimer(new QTimer(this)),            // —Ç–∞–π–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª
    rangeShrinkTimer(new QTimer(this)),     // —Ç–∞–π–º–µ—Ä —Å–∂–∞—Ç–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    currentState(State::Idle),
    currentMinRange(initialMinRange),
    currentMaxRange(initialMaxRange),
    startTime(QTime(0,0)),
    lastSamosborTime(QDateTime::currentDateTime().addSecs(-cooldownSeconds)) // –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
{
    // –¢–∞–π–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    connect(mainTimer, &QTimer::timeout, this, &SamosborController::update);
    // –¢–∞–π–º–µ—Ä —Å–∂–∞—Ç–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω
    connect(rangeShrinkTimer, &QTimer::timeout, this, &SamosborController::handleRangeShrink);
}

// –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä—ã
SamosborController::~SamosborController()
{
    mainTimer->stop();
    rangeShrinkTimer->stop();
}

// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ—Å–±–æ—Ä–∞
void SamosborController::start()
{
    if (currentState == State::Running) return;

    startTime = QTime::currentTime();
    currentState = State::Running;

    mainTimer->start(5000);        // –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
    rangeShrinkTimer->start(120000); // —Å–∂–∞—Ç–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω

    emit stateChanged("–ó–∞–ø—É—â–µ–Ω");
    emit rangeChanged(getRangeInfo());
    emit timeUpdated(getElapsedTimeString());
    emit logMessage("‚ñ∂ –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ—Å–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.");
}

// –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
void SamosborController::pause()
{
    if (currentState != State::Running) return;

    mainTimer->stop();
    rangeShrinkTimer->stop();
    currentState = State::Paused;

    emit stateChanged("–ü–∞—É–∑–∞");
    emit logMessage("‚è∏ –°–∞–º–æ—Å–±–æ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
}

// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
void SamosborController::resume()
{
    if (currentState != State::Paused) return;

    mainTimer->start(5000);
    rangeShrinkTimer->start(120000);
    currentState = State::Running;

    emit stateChanged("–ó–∞–ø—É—â–µ–Ω");
    emit logMessage("‚ñ∂ –°–∞–º–æ—Å–±–æ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.");
}

// –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∞–º–æ—Å–±–æ—Ä–∞
void SamosborController::manualTrigger()
{
    triggerSamosbor();
}

// –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
void SamosborController::manualSlowdown()
{
    triggerSlowdown();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
void SamosborController::update()
{
    emit timeUpdated(getElapsedTimeString());
    generateRandomNumber();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
void SamosborController::generateRandomNumber()
{
    int value = QRandomGenerator::global()->bounded(currentMinRange, currentMaxRange + 1);

    if (value == currentMaxRange) {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫—É–ª–¥–∞—É–Ω–∞
        if (lastSamosborTime.secsTo(QDateTime::currentDateTime()) < cooldownSeconds)
            return;

        triggerSamosbor(); // –°—Ä–∞–±–æ—Ç–∞–ª —Å–∞–º–æ—Å–±–æ—Ä
    }
    else if (value == currentMinRange) {
        triggerSlowdown(); // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ ‚Äî –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
    }
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∞–º–æ—Å–±–æ—Ä–∞
void SamosborController::triggerSamosbor()
{
    lastSamosborTime = QDateTime::currentDateTime(); // –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∞–º–æ—Å–±–æ—Ä–∞

    // –°–±—Ä–æ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    currentMinRange = initialMinRange;
    currentMaxRange = initialMaxRange;

    emit rangeChanged(getRangeInfo());
    emit logMessage("‚ò¢ –°–ê–ú–û–°–ë–û–†! –î–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω.");

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
    int alertRoll = QRandomGenerator::global()->bounded(1, 7);
    QString alertState;

    switch (alertRoll) {
    case 1: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ê–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."; break;
    case 2: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ê–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."; break;
    case 3: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ß–∞—Å—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."; break;
    case 4: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ß–∞—Å—Ç–∏—á–Ω–æ –∞–∫—Ç–∏–≤–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."; break;
    case 5: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞."; break;
    case 6: alertState = "üì¢ –°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: –ó–∞—Ä–∞–∂–µ–Ω–∞."; break;
    }

    emit logMessage(alertState);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    mainTimer->stop();
    rangeShrinkTimer->stop();
    currentState = State::Idle;
    emit stateChanged("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω");
}

// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è (–ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã)
void SamosborController::triggerSlowdown()
{
    if (currentState != State::Running) return;

    currentState = State::Slowdown;
    emit stateChanged("–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ");
    emit logMessage("‚ö† –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.");

    mainTimer->stop(); // –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–∏—Å–µ–ª

    // –ß–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    QTimer::singleShot(120000, this, [this]() {
        if (currentState == State::Slowdown) {
            mainTimer->start(5000);
            currentState = State::Running;
            emit stateChanged("–ó–∞–ø—É—â–µ–Ω");
        }
    });
}

// –°–∂–∞—Ç–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: –≤–µ—Ä—Ö —Å–Ω–∏–∂–∞–µ—Ç—Å—è, –Ω–∏–∑ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è
void SamosborController::handleRangeShrink()
{
    if (currentMinRange < 0) currentMinRange += 10;
    if (currentMaxRange > 0) currentMaxRange -= 10;

    emit rangeChanged(getRangeInfo());
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ—à–µ–¥—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ—Å–±–æ—Ä–∞
QString SamosborController::getElapsedTimeString() const
{
    int seconds = startTime.secsTo(QTime::currentTime());
    return QString("%1:%2")
        .arg(seconds / 60, 2, 10, QChar('0'))
        .arg(seconds % 60, 2, 10, QChar('0'));
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
QString SamosborController::getRangeInfo() const
{
    return QString("%1 / %2").arg(currentMinRange).arg(currentMaxRange);
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
QString SamosborController::getState() const
{
    switch (currentState)
    {
    case State::Idle:      return "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω";
    case State::Running:   return "–ó–∞–ø—É—â–µ–Ω";
    case State::Paused:    return "–ü–∞—É–∑–∞";
    case State::Slowdown:  return "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ";
    }
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
}

// –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
void SamosborController::reset()
{
    mainTimer->stop();
    rangeShrinkTimer->stop();

    currentMinRange = initialMinRange;
    currentMaxRange = initialMaxRange;
    currentState = State::Idle;

    emit rangeChanged(getRangeInfo());
    emit stateChanged("–ù–µ–∞–∫—Ç–∏–≤–µ–Ω");
    emit logMessage("üîÅ –°–∞–º–æ—Å–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω.");
}
